spring:
    datasource:
        url: jdbc:postgresql://localhost:5432/spring_social
        username: postgres
        password: lory

    jpa:
        #generate-ddl: false
        #show-sql: true
        database-platform: org.hibernate.dialect.PostgreSQL9Dialect
        hibernate:
          ddl-auto: create-drop # update
          #naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
        #properties:
        #    hibernate:
              #globally_quoted_identifiers: true
              #jdbc:
              #  lob:
              #    non_contextual_creation: true
              #temp:
              #  use_jdbc_metadata_defaults: false


    security:
      oauth2:
        client:
          registration:
            google:
              clientId: 5014057553-8gm9um6vnli3cle5rgigcdjpdrid14m9.apps.googleusercontent.com
              clientSecret: tWZKVLxaD_ARWsriiiUFYoIk
              redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
              scope:
                - email
                - profile
            facebook:
              clientId: 121189305185277
              clientSecret: 42ffe5aa7379e8326387e0fe16f34132
              redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
              scope:
                - email
                - public_profile
            github:
              clientId: 8942b2727769365dd1a5
              clientSecret: 152ecb73dbfb02ca7a6dcd20dc8a51e4b3222885
              redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
              scope:
                - user:email
                - read:user
          provider:
            facebook:
              authorizationUri: https://www.facebook.com/v3.0/dialog/oauth
              tokenUri: https://graph.facebook.com/v3.0/oauth/access_token
              userInfoUri: https://graph.facebook.com/v3.0/me?fields=id,first_name,middle_name,last_name,name,email,verified,is_verified,picture.width(250).height(250)
app:
  auth:
    tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
    tokenExpirationMsec: 864000000
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect
      - http://localhost:8080/ # considera solo host e porta
      - http://nowrent.me:8000/
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect

springdoc:
  api-docs:
    path: /docs
  swagger-ui:
      path: /docs/ui

server:
  port: ${PORT:8081}

